name: Flutter CI/CD with Shorebird

on:
  push:
    branches:
      - staging

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'

      # 3Ô∏è‚É£ Cache dependencies
      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ${{ github.workspace }}/.dart_tool
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}

      # 4Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # 5Ô∏è‚É£ Setup Shorebird using official action
      - name: üê¶ Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      # 6Ô∏è‚É£ Restore Shorebird Auth (use Base64-encoded secret)
      - name: üîê Setup Shorebird Auth
        run: |
          mkdir -p ~/.config/shorebird
          echo "$SHOREBIRD_AUTH" | base64 --decode > ~/.config/shorebird/access_tokens.json

      # 7Ô∏è‚É£ Verify Shorebird authentication
      - name: ‚úÖ Verify Shorebird Auth
        run: |
          shorebird doctor || exit 1
          echo "‚úÖ Shorebird authentication successful"

      # 8Ô∏è‚É£ Check version change
      - name: Check version change
        id: version_check
        run: |
          VERSION_FILE="pubspec.yaml"
          CURRENT_VERSION=$(grep '^version:' $VERSION_FILE | awk '{print $2}')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "Current version: $CURRENT_VERSION"

          # Fetch main branch for comparison
          if git fetch origin main --depth=1 2>/dev/null; then
            if git show origin/main:pubspec.yaml 2>/dev/null | grep -q '^version:'; then
              OLD_VERSION=$(git show origin/main:pubspec.yaml | grep '^version:' | awk '{print $2}')
              echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
              echo "Old version: $OLD_VERSION"
              if [ "$CURRENT_VERSION" != "$OLD_VERSION" ]; then
                echo "VERSION_CHANGED=true" >> $GITHUB_ENV
                echo "‚úÖ Version changed from $OLD_VERSION to $CURRENT_VERSION"
              else
                echo "VERSION_CHANGED=false" >> $GITHUB_ENV
                echo "üîÑ No version change detected"
              fi
            fi
          else
            echo "üìù First build or no main branch found"
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
          fi

      # 9Ô∏è‚É£ Build or Patch using Shorebird
      - name: Build or Patch
        run: |
          if [ "$VERSION_CHANGED" = "true" ]; then
            echo "üöÄ Building new release (version: $CURRENT_VERSION)"
            shorebird release android --no-confirm --verbose
          else
            echo "üß© Creating patch (no version change)"
            shorebird patch android --no-confirm --verbose
          fi

      # üîü Send to Telegram (only on new release)
      - name: üì§ Send APK to Telegram
        if: env.VERSION_CHANGED == 'true'
        run: |
          APK_PATH=$(find build -name "app-release.apk" -type f | head -n 1)
          if [ -z "$APK_PATH" ]; then
            APK_PATH=$(find . -name "*.apk" -type f | grep release | head -n 1)
          fi

          if [ -n "$APK_PATH" ] && [ -f "$APK_PATH" ]; then
            echo "üì¶ Sending $APK_PATH to Telegram..."
            curl -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
                 -F document=@"$APK_PATH" \
                 -F caption="üöÄ *New App Release v$CURRENT_VERSION*%0AüìÖ $(date '+%Y-%m-%d %H:%M')%0ABranch: staging%0ACommit: $GITHUB_SHA" \
                 -F parse_mode=Markdown \
                 https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument
          else
            echo "‚ùå APK file not found"
            find . -name "*.apk" -type f
          fi
