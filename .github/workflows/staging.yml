name: üê¶ Flutter CI/CD with Shorebird

on:
  push:
    branches:
      - staging

env:
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_AUTH_TOKEN }}
  FLUTTER_VERSION: '3.29.3'

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # 1Ô∏è‚É£ Checkout the repository
      - name: üìö Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Ensure we have the last commit for version comparison

      # 2Ô∏è‚É£ Setup Flutter
      - name: üê¶ Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      # 3Ô∏è‚É£ Cache dependencies for faster builds
      - name: üíæ Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ${{ github.workspace }}/.dart_tool
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}

      # 4Ô∏è‚É£ Install dependencies
      - name: üì¶ Install dependencies
        run: flutter pub get

      # 5Ô∏è‚É£ Setup Shorebird CLI
      - name: üê• Setup Shorebird CLI
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      # 6Ô∏è‚É£ Setup Java (required for Android builds)
      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 7Ô∏è‚É£ Check version change (compare current vs previous commit)
      - name: üîç Check version change
        id: version_check
        run: |
          VERSION_FILE="pubspec.yaml"

          CURRENT_VERSION=$(grep '^version:' $VERSION_FILE | awk '{print $2}')
          RELEASE_VERSION=$(grep '^release_version:' $VERSION_FILE | awk '{print $2}')

          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

          echo "üì¶ Current version: $CURRENT_VERSION"
          echo "üè∑Ô∏è  Release version: $RELEASE_VERSION"

          if git show HEAD~1:$VERSION_FILE >/dev/null 2>&1; then
            OLD_VERSION=$(git show HEAD~1:$VERSION_FILE | grep '^version:' | awk '{print $2}')
            echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
            echo "üïê Previous version: $OLD_VERSION"

            if [ "$CURRENT_VERSION" != "$OLD_VERSION" ]; then
              echo "VERSION_CHANGED=true" >> $GITHUB_ENV
              echo "‚úÖ Version changed from $OLD_VERSION ‚ûú $CURRENT_VERSION"
            else
              echo "VERSION_CHANGED=false" >> $GITHUB_ENV
              echo "üîÑ No version change detected."
            fi
          else
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
            echo "üìù First commit or unable to compare versions."
          fi

      # 8Ô∏è‚É£ Run Shorebird Release or Patch
      - name: üöÄ Create Shorebird Release or Patch
        run: |
          echo "üìå Flutter version: $FLUTTER_VERSION"
          echo "üì¶ Release version: $RELEASE_VERSION"

          if [ "$VERSION_CHANGED" = "true" ]; then
            echo "üÜï Building new release (.apk)..."
            shorebird release android \
              --no-confirm --verbose \
              --artifact=apk \
              --flutter-version="$FLUTTER_VERSION"
          else
            echo "üß© Creating patch for release version $RELEASE_VERSION..."
            shorebird patch \
              --platforms=android \
              --release-version="$RELEASE_VERSION" \
              --no-confirm --verbose \
              --allow-native-diffs \
              --allow-asset-diffs
          fi

      # 9Ô∏è‚É£ Send new APK to Telegram (only for version changes)
      - name: üì§ Send APK to Telegram
        if: env.VERSION_CHANGED == 'true'
        run: |
          set +e  # Avoid stopping the job if file not found

          echo "üîç Searching for release APK..."
          APK_PATH=$(find build/app/outputs/flutter-apk -type f -name "*release*.apk" | head -n 1)

          if [ -z "$APK_PATH" ]; then
            echo "‚ö†Ô∏è APK not found in expected path. Searching entire repo..."
            APK_PATH=$(find . -type f -name "*release*.apk" | head -n 1)
          fi

          if [ -n "$APK_PATH" ] && [ -f "$APK_PATH" ]; then
            echo "‚úÖ Found APK: $APK_PATH"
            echo "üì¶ Uploading to Telegram..."
            curl -s -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
                -F document=@"$APK_PATH" \
                -F caption="üöÄ *New App Release v$CURRENT_VERSION*%0AüìÖ $(date '+%Y-%m-%d %H:%M')%0ABranch: staging%0ACommit: $GITHUB_SHA" \
                -F parse_mode=Markdown \
                https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument
          else
            echo "‚ùå No APK found!"
            echo "Listing build outputs for debugging:"
            find build/ -type f | head -n 50
          fi
