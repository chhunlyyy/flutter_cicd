name: Flutter CI/CD with Shorebird

on:
  push:
    branches:
      - staging

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'
      
      # 3Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # 4Ô∏è‚É£ Setup Shorebird using official action
      - name: üê¶ Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true
          shorebird-token: ${{ secrets.SHOREBIRD_AUTH_TOKEN }}

      # 5Ô∏è‚É£ Verify Shorebird authentication
      - name: Verify Shorebird Auth
        run: |
          shorebird doctor
          echo "‚úÖ Shorebird authentication successful"

      # 6Ô∏è‚É£ Check version change
      - name: Check version change
        id: version_check
        run: |
          VERSION_FILE="pubspec.yaml"
          CURRENT_VERSION=$(grep '^version:' $VERSION_FILE | awk '{print $2}')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "Current version: $CURRENT_VERSION"
          
          # Get previous version from main branch
          git fetch origin main --depth=1 || echo "Unable to fetch main branch, assuming first build"
          
          if git show origin/main:pubspec.yaml 2>/dev/null | grep -q '^version:'; then
            OLD_VERSION=$(git show origin/main:pubspec.yaml | grep '^version:' | awk '{print $2}')
            echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
            echo "Old version: $OLD_VERSION"
            
            if [ "$CURRENT_VERSION" != "$OLD_VERSION" ]; then
              echo "VERSION_CHANGED=true" >> $GITHUB_ENV
              echo "‚úÖ Version changed from $OLD_VERSION to $CURRENT_VERSION"
            else
              echo "VERSION_CHANGED=false" >> $GITHUB_ENV
              echo "üîÑ No version change detected"
            fi
          else
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
            echo "üìù First build or unable to compare versions, building release"
          fi

      # 7Ô∏è‚É£ Build or patch using Shorebird
      - name: Build or Patch
        run: |
         if [ "$VERSION_CHANGED" = "true" ]; then
            echo "üöÄ Building new release (version: $CURRENT_VERSION)"
            # Build Android release
            shorebird release android --no-confirm --verbose
          else
            echo "üß© Creating patch (no version change)"
            # Create Android patch
            shorebird patch android --no-confirm --verbose
          fi

      # 8Ô∏è‚É£ Send to Telegram
      - name: Send APK to Telegram
        if: env.VERSION_CHANGED == 'true'
        run: |
          # Find the APK file - Shorebird typically puts it in the app-release directory
          APK_PATH=$(find build -name "app-release.apk" -type f | head -n 1)
          if [ -z "$APK_PATH" ]; then
            # Alternative search pattern
            APK_PATH=$(find . -name "*.apk" -type f | grep release | head -n 1)
          fi
          
          if [ -n "$APK_PATH" ] && [ -f "$APK_PATH" ]; then
            echo "üì¶ Sending $APK_PATH to Telegram..."
            curl -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
                 -F document=@"$APK_PATH" \
                 -F caption="üöÄ New App Release v$CURRENT_VERSION" \
                 https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument
          else
            echo "‚ùå APK file not found"
            echo "Searching for APK files..."
            find . -name "*.apk" -type f
          fi