name: Flutter CI/CD with Shorebird

on:
  push:
    branches:
      - staging

env:
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_AUTH_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # 1️⃣ Checkout code
      - name: 📚 Git Checkout
        uses: actions/checkout@v4

      # 2️⃣ Setup Flutter
      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'

      # 3️⃣ Cache dependencies
      - name: 💾 Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ${{ github.workspace }}/.dart_tool
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}

      # 4️⃣ Install dependencies
      - name: 📦 Install dependencies
        run: flutter pub get

      # 5️⃣ Setup Shorebird CLI
      - name: 🐦 Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      # 6️⃣ Setup Java (required for Android build)
      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 7️⃣ Check if version changed compared to main
      - name: 🔍 Check version change
        id: version_check
        run: |
          VERSION_FILE="pubspec.yaml"
          CURRENT_VERSION=$(grep '^version:' $VERSION_FILE | awk '{print $2}')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "Current version: $CURRENT_VERSION"

          git fetch origin main --depth=1 || echo "Unable to fetch main branch."
          if git show origin/main:pubspec.yaml 2>/dev/null | grep -q '^version:'; then
            OLD_VERSION=$(git show origin/main:pubspec.yaml | grep '^version:' | awk '{print $2}')
            echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
            if [ "$CURRENT_VERSION" != "$OLD_VERSION" ]; then
              echo "VERSION_CHANGED=true" >> $GITHUB_ENV
              echo "✅ Version changed from $OLD_VERSION to $CURRENT_VERSION"
            else
              echo "VERSION_CHANGED=false" >> $GITHUB_ENV
              echo "🔄 No version change detected"
            fi
          else
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
            echo "📝 First build or unable to compare versions"
          fi

      # 8️⃣ Run Shorebird Release or Patch
      - name: 🚀 Shorebird Build or Patch
        run: |
          if [ "$VERSION_CHANGED" = "true" ]; then
            echo "🆕 Building new release..."
            shorebird release android --no-confirm --verbose
          else
            echo "🧩 Creating patch..."
            shorebird patch android --no-confirm --verbose
          fi

      # 9️⃣ Send APK to Telegram (only for new releases)
      - name: 📤 Send APK to Telegram
        if: env.VERSION_CHANGED == 'true'
        run: |
          set +e  # Don't exit on error

          echo "🔍 Searching for APK file..."
          # Look inside Flutter’s known build path first
          APK_PATH=$(find build/app/outputs/flutter-apk -type f -name "*release*.apk" | head -n 1)

          # Fallback if not found (search everywhere)
          if [ -z "$APK_PATH" ]; then
            echo "⚠️ app-release.apk not found in default path, searching entire repo..."
            APK_PATH=$(find . -type f -name "*release*.apk" | head -n 1)
          fi

          if [ -n "$APK_PATH" ] && [ -f "$APK_PATH" ]; then
            echo "✅ Found APK: $APK_PATH"
            echo "📦 Sending to Telegram..."
            curl -s -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
                -F document=@"$APK_PATH" \
                -F caption="🚀 *New App Release v$CURRENT_VERSION*%0A📅 $(date '+%Y-%m-%d %H:%M')%0ABranch: staging%0ACommit: $GITHUB_SHA" \
                -F parse_mode=Markdown \
                https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument
          else
            echo "❌ APK file not found!"
            echo "Listing available build outputs for debugging:"
            find build/ -type f | head -n 50
          fi

