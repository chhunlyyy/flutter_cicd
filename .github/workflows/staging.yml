name: Flutter CI/CD (Staging)

on:
  push:
    branches:
      - staging

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 🧩 Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 🧩 Step 2: Setup Flutter SDK
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'

      # 🧩 Step 3: Install and Verify Shorebird
      - name: Install and Verify Shorebird
        run: |
          curl -sSf https://raw.githubusercontent.com/shorebirdtech/install/main/install.sh | bash
          export PATH="$HOME/.shorebird/bin:$PATH"
          shorebird doctor

      # 🧩 Step 4: Read version from pubspec.yaml
      - name: Read version from pubspec.yaml
        id: version
        run: |
          version_line=$(grep '^version:' pubspec.yaml | head -n 1)
          echo "version=${version_line#version: }" >> $GITHUB_ENV
          echo "Detected version: ${version_line#version: }"

      # 🧩 Step 5: Get previous version from last successful build
      - name: Get previous version from last successful build
        id: prev_version
        run: |
          prev_version=$(gh run list --branch staging --status success --limit 1 --json displayTitle --jq '.[0].displayTitle' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' || true)
          echo "prev_version=$prev_version" >> $GITHUB_ENV
          echo "Previous version: $prev_version"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 🧩 Step 6: Compare version change
      - name: Compare version
        id: compare
        run: |
          if [ "${{ env.version }}" != "${{ env.prev_version }}" ]; then
            echo "has_version_change=true" >> $GITHUB_ENV
            echo "🔄 Version changed from ${{ env.prev_version }} → ${{ env.version }}"
          else
            echo "has_version_change=false" >> $GITHUB_ENV
            echo "✅ Version unchanged: ${{ env.version }}"
          fi

      # 🧩 Step 7: Prepare Flutter project
      - name: Flutter clean & pub get
        run: |
          flutter clean
          flutter pub get

      # 🧩 Step 8: Build or Patch with Shorebird
      - name: Build or Patch with Shorebird
        run: |
          export PATH="$HOME/.shorebird/bin:$PATH"
          if [ "$has_version_change" = "true" ]; then
            echo "🆕 New version detected — building full release..."
            shorebird release android --flavor staging --artifact appbundle
            shorebird release ios --flavor staging --export-method app-store
          else
            echo "🔁 No version change — creating patch..."
            shorebird patch android --flavor staging
            shorebird patch ios --flavor staging
          fi
        env:
          SHOREBIRD_AUTH_TOKEN: ${{ secrets.SHOREBIRD_AUTH_TOKEN }}

      # 🧩 Step 9: Send APK to Telegram if new version
      - name: Send APK to Telegram (only if version changed)
        if: env.has_version_change == 'true'
        run: |
          APK_PATH=$(find build/app/outputs/flutter-apk -name "*.apk" | head -n 1)
          if [ -f "$APK_PATH" ]; then
            echo "📤 Sending APK to Telegram..."
            curl -F chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
                 -F document=@"$APK_PATH" \
                 -F caption="📱 New *Staging Build* uploaded! Version: *v${{ env.version }}*" \
                 https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument
          else
            echo "⚠️ APK not found at $APK_PATH"
          fi
