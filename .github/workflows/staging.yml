name: üê¶ Flutter CI/CD with Shorebird (iOS + Android)

on:
  push:
    branches:
      - staging
  workflow_dispatch:
    inputs:
      build_mode:
        description: "Build type"
        required: true
        default: "release"
        type: choice
        options:
          - debug
          - profile
          - release
      environment:
        description: "Environment"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - production

env:
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_AUTH_TOKEN }}
  FLUTTER_VERSION: '3.29.3'

jobs:
  build:
    runs-on: macos-latest
    defaults:
      run:
        shell: bash

    steps:
      # 1Ô∏è‚É£ Checkout the repository
      - name: üìö Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # 2Ô∏è‚É£ Setup Flutter SDK
      - name: üê¶ Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      # 3Ô∏è‚É£ Cache Flutter dependencies
      - name: üíæ Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ${{ github.workspace }}/.dart_tool
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}

      # 4Ô∏è‚É£ Install dependencies
      - name: üì¶ Install dependencies
        run: flutter pub get

      # 5Ô∏è‚É£ Setup Shorebird CLI
      - name: üê• Setup Shorebird CLI
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      # 6Ô∏è‚É£ Setup Java (for Android)
      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 7Ô∏è‚É£ Setup Xcode (for iOS)
      - name: üß∞ Setup Xcode
        run: |
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          xcodebuild -version

      # 8Ô∏è‚É£ Check version change
      - name: üîç Check version change
        id: version_check
        run: |
          VERSION_FILE="pubspec.yaml"
          CURRENT_VERSION=$(grep '^version:' $VERSION_FILE | awk '{print $2}')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "üì¶ Current version: $CURRENT_VERSION"

          if git show HEAD~1:$VERSION_FILE >/dev/null 2>&1; then
            OLD_VERSION=$(git show HEAD~1:$VERSION_FILE | grep '^version:' | awk '{print $2}')
            echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
            echo "üïê Previous version: $OLD_VERSION"

            if [ "$CURRENT_VERSION" != "$OLD_VERSION" ]; then
              echo "VERSION_CHANGED=true" >> $GITHUB_ENV
              echo "‚úÖ Version changed from $OLD_VERSION ‚ûú $CURRENT_VERSION"
            else
              echo "VERSION_CHANGED=false" >> $GITHUB_ENV
              echo "üîÑ No version change detected."
            fi
          else
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
            echo "üìù First commit or unable to compare versions."
          fi

      # 9Ô∏è‚É£ Run Shorebird Release or Patch (both iOS + Android)
      - name: üöÄ Create Shorebird Release or Patch (iOS + Android)
        run: |
          echo "üìå Flutter version: $FLUTTER_VERSION"
          echo "üì¶ App version: $CURRENT_VERSION"

          if [ "$VERSION_CHANGED" = "true" ]; then
            echo "üÜï Building new release for Android and iOS..."
            shorebird release android \
              --no-confirm --verbose \
              --artifact=apk \
              --flutter-version="$FLUTTER_VERSION"

            shorebird release ios \
              --no-confirm --verbose \
              --flutter-version="$FLUTTER_VERSION"
          else
            echo "üß© Creating patch for both platforms..."
            shorebird patch \
              --platforms=android,ios \
              --release-version="$CURRENT_VERSION" \
              --no-confirm --verbose \
              --allow-native-diffs \
              --allow-asset-diffs
          fi

      # üîü Notify Telegram
      - name: üì§ Notify Telegram
        run: |
          if [ "$VERSION_CHANGED" = "true" ]; then
            echo "üì§ Sending new release notification to Telegram..."
            APK_PATH=$(find build/app/outputs/flutter-apk -type f -name "*release*.apk" | head -n 1)
            IPA_PATH=$(find build/ios/ipa -type f -name "*.ipa" | head -n 1)

            MESSAGE="üöÄ *New Release v$CURRENT_VERSION*%0AüìÖ $(date '+%Y-%m-%d %H:%M')"

            if [ -n "$APK_PATH" ]; then
              echo "‚úÖ Found APK: $APK_PATH"
              curl -s -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
                  -F document=@"$APK_PATH" \
                  -F caption="$MESSAGE (Android)" \
                  -F parse_mode=Markdown \
                  https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument
            fi

            if [ -n "$IPA_PATH" ]; then
              echo "‚úÖ Found IPA: $IPA_PATH"
              curl -s -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
                  -F document=@"$IPA_PATH" \
                  -F caption="$MESSAGE (iOS)" \
                  -F parse_mode=Markdown \
                  https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument
            fi

            if [ -z "$APK_PATH" ] && [ -z "$IPA_PATH" ]; then
              echo "‚ùå No build files found!"
            fi
          else
            echo "üì© Sending patch notification to Telegram..."
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
              -d text="üß© *New Patch Created*%0Aüì¶ Version: v$CURRENT_VERSION%0AüìÖ $(date '+%Y-%m-%d %H:%M')" \
              -d parse_mode="Markdown"
          fi
