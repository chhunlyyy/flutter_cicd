name: 🐦 Flutter CI/CD with Shorebird

on:
  push:
    branches:
      - staging

env:
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_AUTH_TOKEN }}
  FLUTTER_VERSION: '3.29.3'

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # 1️⃣ Checkout the repository
      - name: 📚 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # 2️⃣ Setup Flutter SDK
      - name: 🐦 Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      # 3️⃣ Cache dependencies
      - name: 💾 Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ${{ github.workspace }}/.dart_tool
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}

      # 4️⃣ Install dependencies
      - name: 📦 Install dependencies
        run: flutter pub get

      # 5️⃣ Setup Shorebird CLI
      - name: 🐥 Setup Shorebird CLI
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      # 6️⃣ Setup Java (required for Android builds)
      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 7️⃣ Check version change
      - name: 🔍 Check version change
        id: version_check
        run: |
          VERSION_FILE="pubspec.yaml"
          CURRENT_VERSION=$(grep '^version:' $VERSION_FILE | awk '{print $2}')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "📦 Current version: $CURRENT_VERSION"

          if git show HEAD~1:$VERSION_FILE >/dev/null 2>&1; then
            OLD_VERSION=$(git show HEAD~1:$VERSION_FILE | grep '^version:' | awk '{print $2}')
            echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
            echo "🕐 Previous version: $OLD_VERSION"

            if [ "$CURRENT_VERSION" != "$OLD_VERSION" ]; then
              echo "VERSION_CHANGED=true" >> $GITHUB_ENV
              echo "✅ Version changed from $OLD_VERSION ➜ $CURRENT_VERSION"
            else
              echo "VERSION_CHANGED=false" >> $GITHUB_ENV
              echo "🔄 No version change detected."
            fi
          else
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
            echo "📝 First commit or unable to compare versions."
          fi

      # 8️⃣ Run Shorebird Release or Patch
      - name: 🚀 Create Shorebird Release or Patch
        run: |
          echo "📌 Flutter version: $FLUTTER_VERSION"
          echo "📦 App version: $CURRENT_VERSION"

          if [ "$VERSION_CHANGED" = "true" ]; then
            echo "🆕 Building new release (.apk)..."
            shorebird release android \
              --no-confirm --verbose \
              --artifact=apk \
              --flutter-version="$FLUTTER_VERSION"
          else
            echo "🧩 Creating patch for version $CURRENT_VERSION..."
            shorebird patch \
              --platforms=android \
              --release-version="$CURRENT_VERSION" \
              --no-confirm --verbose \
              --allow-native-diffs \
              --allow-asset-diffs
          fi

      # 9️⃣ Send to Telegram
      - name: 📤 Notify Telegram
        run: |
          if [ "$VERSION_CHANGED" = "true" ]; then
            echo "📤 Sending new release APK to Telegram..."
            APK_PATH=$(find build/app/outputs/flutter-apk -type f -name "*release*.apk" | head -n 1)

            if [ -z "$APK_PATH" ]; then
              echo "⚠️ APK not found. Searching in full repo..."
              APK_PATH=$(find . -type f -name "*release*.apk" | head -n 1)
            fi

            if [ -n "$APK_PATH" ]; then
              echo "✅ Found APK: $APK_PATH"
              curl -s -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
                  -F document=@"$APK_PATH" \
                  -F caption="🚀 *New App Release v$CURRENT_VERSION*%0A📅 $(date '+%Y-%m-%d %H:%M')%0ABranch: staging%0ACommit: $GITHUB_SHA" \
                  -F parse_mode=Markdown \
                  https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument
            else
              echo "❌ No APK found!"
            fi
          else
            echo "📩 Sending new patch notification to Telegram..."
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
              -d text="🧩 *New Patch Created*%0A📦 Version: v$CURRENT_VERSION%0A📅 $(date '+%Y-%m-%d %H:%M')%0ABranch: staging%0ACommit: $GITHUB_SHA" \
              -d parse_mode="Markdown"
          fi
