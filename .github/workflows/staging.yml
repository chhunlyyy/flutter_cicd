name: Flutter CI/CD (Staging)

on:
  push:
    branches:
      - staging

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'

      - name: Setup Shorebird
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://shorebird.dev/install.sh | bash
          export PATH="$HOME/.shorebird/bin:$PATH"
          shorebird doctor

      - name: Read version from pubspec.yaml
        id: version
        run: |
          version_line=$(grep '^version:' pubspec.yaml | head -n 1)
          echo "version=${version_line#version: }" >> $GITHUB_ENV
          echo "Detected version: ${version_line#version: }"

      - name: Get previous version from last successful build
        id: prev_version
        run: |
          echo "prev_version=$(gh run list --branch staging --status success --limit 1 --json name,displayTitle --jq '.[0].displayTitle' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')" >> $GITHUB_ENV || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Compare version
        id: compare
        run: |
          if [ "$version" != "$prev_version" ]; then
            echo "has_version_change=true" >> $GITHUB_ENV
          else
            echo "has_version_change=false" >> $GITHUB_ENV
          fi

      - name: Flutter clean & get
        run: |
          flutter clean
          flutter pub get

      - name: Build or Patch
        run: |
          export PATH="$HOME/.shorebird/bin:$PATH"
          if [ "$has_version_change" = "true" ]; then
            echo "üÜï New version detected ‚Äî building full release..."
            shorebird release android --flavor staging
            shorebird release ios --flavor staging --export-method app-store
          else
            echo "üîÅ No version change ‚Äî creating patch..."
            shorebird patch android --flavor staging
            shorebird patch ios --flavor staging
          fi

      - name: Send APK to Telegram (if version change)
        if: env.has_version_change == 'true'
        run: |
          APK_PATH=$(find build/app/outputs/flutter-apk -name "*.apk" | head -n 1)
          curl -F chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
               -F document=@"$APK_PATH" \
               -F caption="üì± New Staging Build: v${{ env.version }}" \
               https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument


#8178167192:AAG4AXaYDZ62L4emJ9CyQj5O2iZToxy3tjw
#584161429