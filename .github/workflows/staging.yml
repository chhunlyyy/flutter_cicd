name: Flutter CI/CD with Shorebird

on:
  push:
    branches:
      - staging

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'
      
      # 3Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # 4Ô∏è‚É£ Manual Shorebird installation
      - name: Install Shorebird CLI
        run: |
          echo "üîß Installing Shorebird CLI..."
          mkdir -p $HOME/.shorebird/bin
          
          # Download Shorebird CLI directly
          curl -L -f "https://github.com/shorebirdtech/shorebird/releases/latest/download/shorebird-linux-x64.zip" -o shorebird.zip
          
          unzip -q shorebird.zip -d $HOME/.shorebird/bin
          chmod +x $HOME/.shorebird/bin/shorebird
          
          echo "$HOME/.shorebird/bin" >> $GITHUB_PATH
          echo "‚úÖ Shorebird installed successfully!"
          $HOME/.shorebird/bin/shorebird --version

      # 5Ô∏è‚É£ Explicit Shorebird login
      - name: Login to Shorebird
        run: |
          export PATH="$HOME/.shorebird/bin:$PATH"
          echo "üîë Logging into Shorebird..."
          shorebird login --ci-token "${{ secrets.SHOREBIRD_AUTH_TOKEN }}"
          echo "‚úÖ Login command completed"

      # 6Ô∏è‚É£ Verify authentication
      - name: Verify Shorebird Auth
        run: |
          export PATH="$HOME/.shorebird/bin:$PATH"
          echo "üîç Verifying authentication..."
          shorebird doctor
          echo "‚úÖ Authentication verified successfully"

      # 7Ô∏è‚É£ Check version change
      - name: Check version change
        id: version_check
        run: |
          VERSION_FILE="pubspec.yaml"
          CURRENT_VERSION=$(grep '^version:' $VERSION_FILE | awk '{print $2}')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "Current version: $CURRENT_VERSION"
          
          # Get previous version from main branch
          git fetch origin main --depth=1 || echo "Unable to fetch main branch, assuming first build"
          
          if git show origin/main:pubspec.yaml 2>/dev/null | grep -q '^version:'; then
            OLD_VERSION=$(git show origin/main:pubspec.yaml | grep '^version:' | awk '{print $2}')
            echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
            echo "Old version: $OLD_VERSION"
            
            if [ "$CURRENT_VERSION" != "$OLD_VERSION" ]; then
              echo "VERSION_CHANGED=true" >> $GITHUB_ENV
              echo "‚úÖ Version changed from $OLD_VERSION to $CURRENT_VERSION"
            else
              echo "VERSION_CHANGED=false" >> $GITHUB_ENV
              echo "üîÑ No version change detected"
            fi
          else
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
            echo "üìù First build or unable to compare versions, building release"
          fi

      # 8Ô∏è‚É£ Build or patch using Shorebird
      - name: Build or Patch
        run: |
          export PATH="$HOME/.shorebird/bin:$PATH"
          if [ "$VERSION_CHANGED" = "true" ]; then
            echo "üöÄ Building new release (version: $CURRENT_VERSION)"
            shorebird release android --force --verbose
          else
            echo "üß© Creating patch (no version change)"
            shorebird patch android --verbose
          fi

      # 9Ô∏è‚É£ Send to Telegram
      - name: Send APK to Telegram
        if: env.VERSION_CHANGED == 'true'
        run: |
          # Find the APK file
          APK_PATH=$(find build -name "app-release.apk" -type f | head -n 1)
          if [ -z "$APK_PATH" ]; then
            APK_PATH=$(find . -name "*.apk" -type f | grep release | head -n 1)
          fi
          
          if [ -n "$APK_PATH" ] && [ -f "$APK_PATH" ]; then
            echo "üì¶ Sending $APK_PATH to Telegram..."
            curl -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
                 -F document=@"$APK_PATH" \
                 -F caption="üöÄ New App Release v$CURRENT_VERSION" \
                 https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument
          else
            echo "‚ùå APK file not found"
            find . -name "*.apk" -type f
          fi